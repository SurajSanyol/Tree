struct Node
{
    int data;
    Node* left, * right;
}; */

class Solution {
public:

    void leftBoundary(Node*node,vector<int>&ans){
          
          if(node==NULL) return ;
          
          if(node->left==NULL && node->right==NULL){
              return;
          }
           
           ans.push_back(node->data);
          
          if(node->left){
              
              leftBoundary(node->left,ans);
          }
          else{
               leftBoundary(node->right,ans);
          }
    }
     
     void leafNodeBundary(Node*node , vector<int>&ans){
          if(node==NULL) return;
          
          if(node->left==NULL && node->right==NULL){
              ans.push_back(node->data);
          }
          leafNodeBundary(node->left,ans);
          leafNodeBundary(node->right,ans);
     }
     
     void rightBoundary(Node*node , vector<int>&ans){
          if(node==NULL) return;
          
           if(node->left==NULL && node->right==NULL){
              return;
           }
            if(node->right){
                
            rightBoundary(node->right,ans);
            }
            else{
                
            rightBoundary(node->left,ans);
            }
            
            ans.push_back(node->data);
           
     }
    
    vector <int> boundary(Node *root)
    {
        //Your code here
         vector<int>ans;
          if(root==NULL) return ans; 
          
            if (root->left != NULL || root->right != NULL) {
                    ans.push_back(root->data);
                  }
          
          leftBoundary(root->left,ans);
          leafNodeBundary(root,ans);
          rightBoundary(root->right,ans);
          return ans;
    }
};
